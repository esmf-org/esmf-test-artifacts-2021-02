  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec Base name    = MyArray with ArraySpec

 Status: Base =   PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
 Status: Base = Ready,  object =   PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
{}{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x13fe100:
            rank = 2, typekind = 6,   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
base_addr = 0x13fe430
            dim[0] = 7  dim[1] = 12  
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 2, typekind = 6, base_addr = 0x8d3100
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
  Real, *8, Dim 2, Data values:
( 9, 1) =  0
(10, 1) =  0
( 9,13) =  0
(10,13) =  0
(11,13) =  0
(12,13) =  0
(11, 1) =  0
(12, 1) =  0
(13, 1) =  0
(14, 1) =  0
(13,13) =  0
(14,13) =  0
(15,13) =  0
( 9,14) =  0
(15, 1) =  0
( 9, 2) =  0
(10, 2) =  0
(11, 2) =  0
  skipping to end ...
(10,14) =  0
(11,14) =  0
  skipping to end ...
(13,22) =  0
(14,22) =  0
(15,22) =  0
(13,11) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
( 9,23) =  0
(10,23) =  0
(11,23) =  0
(12,23) =  0
(13,23) =  0
(11,12) =  0
(12,12) =  0
(13,12) =  0
(14,12) =  0
(15,12) =  0
(14,23) =  0
(15,23) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
 Array name: MyArray with ArraySpec                                                          
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec Base name    = MyArray with ArraySpec

 Status: Base =  Status: Base = Ready, Ready,  object = Ready object = Ready
 Proxy        = 
 Proxy        = no
no
 Root Info (Attributes):
 Root Info (Attributes):
{}{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x165ef10:
            rank = 2, typekind = 6, LocalArrayPrint: Array at address 0x1cd0160:
            rank = 2, typekind = 6, base_addr = 0x1cd0490
            base_addr = 0x165f240
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
( 1,13) =  0
( 2,13) =  0
( 3,13) =  0
( 3, 1) =  0
( 4, 1) =  0
( 4,13) =  0
( 5,13) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
( 6,13) =  0
( 7,13) =  0
( 8,13) =  0
( 1,14) =  0
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 2,14) =  0
  skipping to end ...
( 7,22) =  0
( 8,22) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
( 1,23) =  0
( 2,23) =  0
( 3,23) =  0
( 4,23) =  0
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 5,23) =  0
( 6,23) =  0
( 7,23) =  0
( 8,23) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
 Base name    = --- ESMCI::Array::print start ---
 Base name    = Array007
 Status: Base = ReadyArray007
 Status: Base = Ready,  object = Ready
 Proxy        = ,  object = Ready
 Proxy        = no
 Root Info (Attributes):
 Array name: MyArray with ArraySpec                                                          
no
 Root Info (Attributes):
{}  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d3ed0:
            rank = 2, typekind = 6, base_addr = 0x8d4200
            dim[0] = 7  ~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x13ff040:
            rank = 2, typekind = 6, base_addr = 0x13ff370
            dim[0] = 7  dim[1] = 12  
dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  0
(10,13) =  0
  Real, *8, Dim 2, Data values:
( 9, 1) =  0
(10, 1) =  0
(11, 1) =  0
(11,13) =  0
(12,13) =  0
(13,13) =  0
(14,13) =  0
(15,13) =  0
(12, 1) =  0
(13, 1) =  0
(14, 1) =  0
(15, 1) =  0
( 9,14) =  0
(10,14) =  0
(11,14) =  0
  skipping to end ...
(13,22) =  0
( 9, 2) =  0
(10, 2) =  0
(11, 2) =  0
  skipping to end ...
(13,11) =  0
(14,22) =  0
(15,22) =  0
( 9,23) =  0
(10,23) =  0
(11,23) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
(11,12) =  0
(12,23) =  0
(13,23) =  0
(14,23) =  0
(15,23) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
(12,12) =  0
(13,12) =  0
(14,12) =  0
(15,12) =  0
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347

  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready--- ESMCI::Array::print start ---
 Base name    = MyArray
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313

 Proxy        = no
 Root Info (Attributes):
{}  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
LocalArrayPrint: Array at address 0x13fe100:
            rank = 3, typekind = 5, base_addr = 0x13ff680
            dim[0] = 9  dim[1] = 12  localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 3, typekind = 5, base_addr = 0x8d45f0
              PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  3.52182e-38
(-1, 1, 3) =  0
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  1.29534e-38
(-1, 1, 3) =  0
( 0, 1, 3) =  3.52425e-38
( 1, 1, 3) =  0
( 2, 1, 3) =  2.1128e-19
( 3, 1, 3) =  160.4
( 0, 1, 3) =  1.29652e-38
( 1, 1, 3) =  0
( 2, 1, 3) =  2.1128e-19
( 3, 1, 3) =  160.4
( 4, 1, 3) =  2.11283e-19
( 5, 1, 3) =  7.71352e+31
( 6, 1, 3) =  8.46648e+11
( 4, 1, 3) =  2.11283e-19
( 5, 1, 3) =  7.71352e+31
( 6, 1, 3) =  8.46648e+11
(-2, 2, 3) =  13.9547
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-2, 2, 3) =  13.9547
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = Array007 Base name    = Array007
 Status: Base = Ready, 
 Status: Base = Ready,  object = Ready object = Ready
 Proxy        = 
 Proxy        = no
 Root Info (Attributes):
no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~

DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1cd10c0:
            rank = 2, typekind = 6, base_addr = 0x1cd13f0
            LocalArrayPrint: Array at address 0x1660030:
            rank = 2, typekind = 6, base_addr = 0x1660360
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
( 1,13) =  0
( 2,13) =  0
( 3,13) =  0
( 1, 1) =  0
( 2, 1) =  0
( 3, 1) =  0
( 4,13) =  0
( 5,13) =  0
( 6,13) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
( 7,13) =  0
( 8,13) =  0
( 1,14) =  0
( 2,14) =  0
  skipping to end ...
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 7,22) =  0
( 8,22) =  0
( 1,23) =  0
( 2,23) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 3,23) =  0
( 4,23) =  0
( 5,23) =  0
( 6,23) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,23) =  0
( 8,23) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
( 7,12) =  0
( 8,12) =  0
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
--- ESMCI::Array::print start ---
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}--- ESMCI::Array::print start ---
 Base name    = MyArray
Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
 Status: Base = Ready,  object = Ready
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x165ef10:
            rank = 3, typekind = 5,  Proxy        = no
 Root Info (Attributes):
base_addr = 0x16607f0
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  4.22006e-38
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cd0160:
(-1, 1, 3) =  0
( 0, 1, 3) =  4.22321e-38
            rank = 3, typekind = 5, base_addr = 0x1cd16e0
            ( 1, 1, 3) =  0
( 2, 1, 3) =  2.1128e-19
dim[0] = 9  dim[1] = 12  dim[2] = 8  
( 3, 1, 3) =  160.4
( 4, 1, 3) =  2.11283e-19
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  7.52571e-38
( 5, 1, 3) =  7.71352e+31
( 6, 1, 3) =  8.46648e+11
(-1, 1, 3) =  0
( 0, 1, 3) =  7.5307e-38
(-2, 2, 3) =  13.9547
  skipping to end ...
( 6,11,10) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  2.1128e-19
( 3, 1, 3) =  160.4
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 4, 1, 3) =  2.11283e-19
( 5, 1, 3) =  7.71352e+31
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 6, 1, 3) =  8.46648e+11
(-2, 2, 3) =  13.9547
  skipping to end ...
( 5,12,10) =  0
( 6,12,10) =  0
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0

( 3,12,10) =  0
( 4,12,10) =  0
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1402150:
            rank = 2, typekind = 6, base_addr = 0x1402930
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  6.94785e-310
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready(10, 1) =  6.94785e-310
(11, 1) =  1.03665e-316
(12, 1) =  1.03665e-316
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(13, 1) =  1.9098e-313
(14, 1) =  2.3342e-313
(15, 1) =  2.75859e-313
( 9, 2) =  3.18299e-313
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
(10, 2) =  3.60739e-313
(11, 2) =  4.03179e-313
  skipping to end ...
(13,11) =  9.54898e-313
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 2, typekind = 6, base_addr = 0x8d7e10
(14,11) =  9.97338e-313
(15,11) =  1.03978e-312
( 9,12) =  1.08222e-312
(10,12) =  1.12466e-312
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
(11,12) =  1.1671e-312
(12,12) =  1.20954e-312
(13,12) =  1.25198e-312
(14,12) =  3.07689e-312
(15,12) =  3.11933e-312
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
( 9,13) =  6.90034e-310
(10,13) =  6.90034e-310
(11,13) =  4.58139e-317
(12,13) =  4.58139e-317
(13,13) =  0
(14,13) =  6.90031e-310
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
(15,13) =  5.09279e-313
( 9,14) =  3.64126e-321
(10,14) =  4.57916e-317
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
(11,14) =  6.90034e-310
  skipping to end ...
(13,22) =  2.122e-314
(14,22) =  2.122e-314
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
(15,22) =  2.122e-314
( 9,23) =  4.24399e-314
(10,23) =  2.122e-314
(11,23) =  2.122e-314
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
(12,23) =  2.122e-314
(13,23) =  2.122e-314
(14,23) =  2.122e-314
(15,23) =  2.122e-314
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object =   PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1402150:
            rank = 2, typekind = 6, base_addr = 0x1402930
            dim[0] = 7    PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  6.94785e-310
(10, 1) =  6.94785e-310
 Proxy        = no
 Root Info (Attributes):
(11, 1) =  1.03665e-316
(12, 1) =  1.03665e-316
(13, 1) =  1.9098e-313
(14, 1) =  2.3342e-313
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
(15, 1) =  2.75859e-313
( 9, 2) =  3.18299e-313
(10, 2) =  3.60739e-313
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 2, typekind = 6, base_addr = 0x8d63d0
            (11, 2) =  4.03179e-313
  skipping to end ...
(13,11) =  9.54898e-313
(14,11) =  9.97338e-313
dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9,13) =  6.90034e-310
(15,11) =  1.03978e-312
( 9,12) =  1.08222e-312
(10,12) =  1.12466e-312
(11,12) =  1.1671e-312
(10,13) =  6.90034e-310
(11,13) =  6.01347e-154
(12,13) =  6.01347e-154
(13,13) =  6.01347e-154
(12,12) =  1.20954e-312
(13,12) =  1.25198e-312
(14,12) =  3.07689e-312
(15,12) =  3.11933e-312
(14,13) =  6.01347e-154
(15,13) =  6.01347e-154
( 9,14) =  6.01347e-154
(10,14) =  6.01347e-154
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
(11,14) =  6.01347e-154
  skipping to end ...
(13,23) =  0
(14,23) =  3.48316e-321
(15,23) =  6.90034e-310
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
( 9,24) =  6.90034e-310
(10,24) =  0
(11,24) =  0
(12,24) =  0
(13,24) =  0
(14,24) =  0
(15,24) =  0
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready, ~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x13fffe0:
 object = Ready
 Proxy        = no
 Root Info (Attributes):
            rank = 2, typekind = 6, base_addr = 0x1402930
            dim[0] = 11  dim[1] = 18  
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
  Real, *8, Dim 2, Data values:
( 8,-1) =  6.94785e-310
( 9,-1) =  6.94785e-310
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 2, typekind = 6, base_addr = 0x8d4aa0
(10,-1) =  1.03665e-316
(11,-1) =  1.03665e-316
(12,-1) =  1.9098e-313
(13,-1) =  2.3342e-313
            dim[0] = 11  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 8,11) =  6.90034e-310
(14,-1) =  2.75859e-313
(15,-1) =  3.18299e-313
(16,-1) =  3.60739e-313
(17,-1) =  4.03179e-313
( 9,11) =  6.90034e-310
(10,11) =  4.57488e-317
(11,11) =  4.57488e-317
  skipping to end ...
( 9,16) =  8.74485e+199
(10,16) =  7.22941e+159
(12,11) =  1.33261e-311
(13,11) =  1.33686e-311
(14,11) =  1.3411e-311
(15,11) =  1.34535e-311
(11,16) =  9.77635e+24
(12,16) =  2.59339e+161
(13,16) =  8.9119e+35
(16,11) =  1.34959e-311
(17,11) =  1.35383e-311
  skipping to end ...
( 9,27) =  6.45087e-312
(14,16) =  6.57947e-85
(15,16) =  7.35162e+223
(16,16) =  1.08671e-312
(10,27) =  6.49331e-312
(11,27) =  6.53575e-312
(12,27) =  6.57819e-312
(13,27) =  6.62063e-312
(17,16) =  2.84347e-312
(18,16) =  2.85076e-321
dim 1: [0]: [8 [9 [9, 15] 13] 18]
(14,27) =  6.66307e-312
(15,27) =  6.70551e-312
(16,27) =  6.74795e-312
(17,27) =  6.79039e-312
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
(18,27) =  6.83283e-312
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 585
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x1663d60:
            rank = 2, typekind = 6, base_addr = 0x1664090
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
( 1, 1) =  6.93349e-310
( 2, 1) =  6.93349e-310
( 3, 1) =  0
( 4, 1) =  0
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
( 5, 1) =  3.33153e-312
( 6, 1) =  3.37397e-312
( 7, 1) =  3.41641e-312
( 8, 1) =  3.45885e-312
( 1, 2) =  3.50129e-312
( 2, 2) =  3.54373e-312
  skipping to end ...
( 7,11) =  4.01057e-312
( 8,11) =  4.05301e-312
( 1,12) =  4.09545e-312
( 2,12) =  4.13789e-312
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
( 3,12) =  4.18033e-312
( 4,12) =  4.22277e-312
( 5,12) =  4.26521e-312
( 6,12) =  4.30765e-312
( 7,12) =  4.35009e-312
( 8,12) =  4.39253e-312
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cd41b0:
            rank = 2, typekind = 6, base_addr = 0x1cd4990
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  6.9151e-310
( 2,13) =  6.9151e-310
( 3,13) =  1.49361e-316
( 4,13) =  1.49361e-316
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
( 5,13) =  4.24399e-313
( 6,13) =  4.66839e-313
( 7,13) =  5.09279e-313
( 8,13) =  5.51719e-313
( 1,14) =  0
( 2,14) =  7.16395e-322
--- ESMCI::Array::print start ---
  skipping to end ...
( 7,22) =  9.33678e-313
( 8,22) =  9.76118e-313
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
( 1,23) =  1.01856e-312
( 2,23) =  1.061e-312
( 3,23) =  1.10344e-312
 Proxy        = no
 Root Info (Attributes):
( 4,23) =  1.14588e-312
( 5,23) =  1.18832e-312
{}( 6,23) =  1.23076e-312
( 7,23) =  1.50662e-312
Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
( 8,23) =  2.0159e-312
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x16648f0:
            rank = 2, typekind = 6, --- ESMCI::Array::print end ---
base_addr = 0x1663d60
            dim[0] = 8  dim[1] = 12    PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479

  Real, *8, Dim 2, Data values:
( 1, 1) =  6.93349e-310
( 2, 1) =  6.93349e-310
( 3, 1) =  1.15995e-316
( 4, 1) =  1.15995e-316
( 5, 1) =  0
( 6, 1) =  2.122e-314
( 7, 1) =  2.122e-314
( 8, 1) =  2.122e-314
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
( 1, 2) =  2.122e-314
( 2, 2) =  2.54639e-313
  skipping to end ...
( 7,11) =  4.45619e-313
( 8,11) =  4.88059e-313
( 1,12) =  5.30499e-313
( 2,12) =  5.72939e-313
( 3,12) =  6.15379e-313
( 4,12) =  6.57819e-313
( 5,12) =  7.00259e-313
( 6,12) =  7.42699e-313
( 7,12) =  7.85138e-313
( 8,12) =  8.27578e-313
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cd41b0:
            rank = 2, typekind = 6, base_addr = 0x1cd4990
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
( 1,13) =  6.9151e-310
( 2,13) =  6.9151e-310
( 3,13) =  1.49361e-316
( 4,13) =  1.49361e-316
( 5,13) =  4.24399e-313
( 6,13) =  4.66839e-313
( 7,13) =  5.09279e-313
( 8,13) =  5.51719e-313
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
( 1,14) =  0
( 2,14) =  7.16395e-322
  skipping to end ...
( 7,23) =  1.50662e-312
( 8,23) =  2.0159e-312
( 1,24) =  2.52517e-312
( 2,24) =  5.53848e-321
( 3,24) =  6.9151e-310
( 4,24) =  6.9151e-310
( 5,24) =  1.49364e-316
( 6,24) =  1.49364e-316
( 7,24) =  3.48007e-312
( 8,24) =  3.52251e-312
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base =   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x16607f0:
            rank = 2, typekind = 6, base_addr = 0x1662160
            dim[0] = 12  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 0,-1) =  6.93349e-310
( 1,-1) =  6.93349e-310
( 2,-1) =  1.15959e-316
( 3,-1) =  1.15959e-316
( 4,-1) =  0
( 5,-1) =  0
( 6,-1) =  0
( 7,-1) =  0
( 8,-1) =  0
( 9,-1) =  0
  skipping to end ...
( 2,16) =  0
( 3,16) =  0
( 4,16) =  0
( 5,16) =  0
( 6,16) =  0
( 7,16) =  0
( 8,16) =  0
( 9,16) =  0
(10,16) =  0
(11,16) =  0
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cd41b0:
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
            rank = 2, typekind = 6, base_addr = 0x1cd2040
            dim[0] = 12  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 0,11) =  6.9151e-310
( 1,11) =  6.9151e-310
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 581
( 2,11) =  1.49308e-316
( 3,11) =  1.49308e-316
( 4,11) =  1.6976e-311
( 5,11) =  1.70184e-311
( 6,11) =  1.70608e-311
( 7,11) =  1.71033e-311
( 8,11) =  1.71457e-311
( 9,11) =  1.71882e-311
  skipping to end ...
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
( 2,27) =  1.49376e-316
( 3,27) =  6.9151e-310
( 4,27) =  0
( 5,27) =  4.79244e-322
( 6,27) =  1.49376e-316
( 7,27) =  6.9151e-310
( 8,27) =  3.01254e-153
( 9,27) =  3.21143e-322
(10,27) =  1.49376e-316
(11,27) =  6.9151e-310
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 589
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
--- ESMCI::Array::print start ---
 Base name    = Array020
 Status: Base = Ready  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
--- ESMCI::Array::print start ---
 Base name    = Array020
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):,  object = Ready
 Proxy        = no
 Root Info (Attributes):

{}{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1408d10:
LocalArrayPrint: Array at address 0x8df4b0:
            rank = 1, typekind = 6, base_addr = 0x7ffdf986e950
            dim[0] = 10              rank = 1, typekind = 6, base_addr = 0x7ffc37cd5e30
            dim[0] = 10  
  Real, *8, Dim 1, Data values:

  Real, *8, Dim 1, Data values:
( 1) =  2.122e-314
( 1) =  6.94785e-310
( 2) =  6.94785e-310
( 2) =  2.122e-314
( 3) =  0
( 4) =  6.90034e-310
( 5) =  6.90034e-310
( 3) =  6.95255e-310
( 4) =  6.95255e-310
( 5) =  2.122e-314
( 6) =  2.122e-314
( 6) =  6.90034e-310
( 7) =  6.90034e-310
( 8) =  6.90034e-310
( 9) =  2.122e-314
( 7) =  0
( 8) =  6.94786e-310
( 9) =  6.94786e-310
(10) =  2.122e-314
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
(10) =  6.94786e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    =  Base name    = Array020
 Status: Base = ReadyArray020
 Status: Base = Ready,  object = ,  object = Ready
 Proxy        = noReady
 Proxy        = no
 Root Info (Attributes):

 Root Info (Attributes):
{}{}Array typekind/rank: Real*8 / 1 
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
--- ESMCI::Array::print start ---deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x16682c0:
            rank = 1, typekind = 6, base_addr = 0x7fff056e88f0
LocalArrayPrint: Array at address 0x1cdb110:
            rank = 1, typekind = 6, base_addr = 0x7ffc4c2eae30
            dim[0] = 10  
 Base name    = Array021
 Status: Base = Ready,  object = Ready
 Proxy        = no            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  6.93349e-310
--- ESMCI::Array::print start ---
 Base name    = Array021
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}
  Real, *8, Dim 1, Data values:
( 1) =  6.9151e-310
( 2) =  6.9151e-310

 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x8d2dd0:
            rank = 1, typekind = 6, ( 2) =  6.93349e-310
( 3) =  6.95315e-310
( 4) =  6.95315e-310
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x1408d10:
            rank = 1, typekind = 6, base_addr = 0x7ffc37cd5e30
( 3) =  6.95257e-310
( 4) =  6.95257e-310
( 5) =  2.122e-314
( 6) =  2.122e-314
base_addr = 0x7ffdf986e950
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  2.122e-314
( 2) =  2.122e-314
( 3) =  0
( 5) =  2.122e-314
( 6) =  2.122e-314
( 7) =  0
( 8) =  6.93349e-310
( 9) =  6.93349e-310
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  6.94785e-310
( 2) =  6.94785e-310
( 3) =  6.95255e-310
( 7) =  0
( 8) =  6.9151e-310
( 9) =  6.9151e-310
(10) =  6.9151e-310
( 4) =  6.90034e-310
( 5) =  6.90034e-310
( 6) =  6.90034e-310
( 7) =  6.90034e-310
( 8) =  6.90034e-310
( 9) =  2.122e-314
(10) =  2.122e-314
(10) =  6.93349e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
( 4) =  6.95255e-310
( 5) =  2.122e-314
( 6) =  2.122e-314
( 7) =  0
( 8) =  6.94786e-310
( 9) =  6.94786e-310
(10) =  6.94786e-310
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
dim 1: [0]: [1 [1 [1, 10] 9] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
--- ESMCI::Array::print start ---
--- ESMCI::Array::print start ---
 Base name    = Array021
 Base name    = Array021
 Status: Base = Ready,  Status: Base = Ready,  object = Ready
 object = Ready
 Proxy        = no
 Proxy        = no
 Root Info (Attributes):
 Root Info (Attributes):
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1

DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x16682c0:
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x1cdb070:
            rank = 1, typekind = 6,   PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
            rank = 1, typekind = 6, base_addr = 0x7fff056e88f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
base_addr = 0x7ffc4c2eae30
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  6.9151e-310
( 1) =  6.93349e-310
( 2) =  6.93349e-310
( 2) =  6.9151e-310
( 3) =  6.95257e-310
( 3) =  6.95315e-310
( 4) =  6.95315e-310
( 4) =  6.95257e-310
( 5) =  2.122e-314
( 5) =  2.122e-314
( 6) =  2.122e-314
( 7) =  0
( 6) =  2.122e-314
( 7) =  0
( 8) =  6.9151e-310
( 8) =  6.93349e-310
( 9) =  6.93349e-310
( 9) =  6.9151e-310
(10) =  6.9151e-310
(10) =  6.93349e-310
dim 1: [0]: [1 [2 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
--- ESMCI::Array::print start ---
 Base name    = --- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = noReady
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932

 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
--- ESMCI::Array::print start ---
 Base name    = --- ESMCI::Array::print start ---
 Base name    = MyArray
MyArray
 Status: Base = Ready,  object =  Status: Base = Ready,  object = Ready
 Proxy        = Ready
 Proxy        = no
 Root Info (Attributes):no
 Root Info (Attributes):

{}Array typekind/rank: Real*8 / 1 
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x166d7f0:
            rank = 1, typekind = 6, base_addr = 0x16682e0
            dim[0] = 4    PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062

  Real, *8, Dim 1, Data values:
( 1) =  1.16126e-316
( 2) =  6.32404e-322
( 3) =  0
( 4) =  0
dim 1: [0]: [1 [1 [1, 4] 4] 4]
--- ESMCI::Array::print end ---
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  PET           1  Test Elapsed Time    14.857999999999997       msec.
  PET           0  Test Elapsed Time    15.008000000000001       msec.
  PET           3  Test Elapsed Time    14.901000000000002       msec.
  PET           2  Test Elapsed Time    15.082999999999998       msec.
