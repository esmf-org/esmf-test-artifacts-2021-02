  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  Beginning Test, file ESMF_ArrayCreateGetUTest.F90, line 96
  NUMBER_OF_PROCESSORS           4
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 117
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Testing Array IsCreated for uncreated object, ESMF_ArrayCreateGetUTest.F90, line 124
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Create test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 142
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 149
  PASS  Testing Array IsCreated for created object, ESMF_ArrayCreateGetUTest.F90, line 156
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Destroy test Array for IsCreated, ESMF_ArrayCreateGetUTest.F90, line 163
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 170
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  Testing Array IsCreated for destroyed object, ESMF_ArrayCreateGetUTest.F90, line 177
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 185
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array equality before assignment Test, ESMF_ArrayCreateGetUTest.F90, line 192
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  Array assignment and equality Test, ESMF_ArrayCreateGetUTest.F90, line 201
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 208
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 216
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Array non-equality after destroy Test, ESMF_ArrayCreateGetUTest.F90, line 224
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  Double ArrayDestroy through alias Test, ESMF_ArrayCreateGetUTest.F90, line 231
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 rank inconsistency Test, ESMF_ArrayCreateGetUTest.F90, line 240
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 248
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArraySet Test, ESMF_ArrayCreateGetUTest.F90, line 255
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 262
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test w/ ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 276
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
--- ESMCI::Array::print start ---
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 Test with ArraySpec, ESMF_ArrayCreateGetUTest.F90, line 284
 Base name    = MyArray with ArraySpec
 Status: Base = --- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpecReady,  object = Ready
 Proxy        = no
 Root Info (Attributes):

 Status: Base = Ready,  object = Ready
 Proxy        = no--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec--- ESMCI::Array::print start ---
 Base name    = MyArray with ArraySpec

 Root Info (Attributes):

 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8eb5e16010:
            rank = 2, typekind = 6, base_addr = 0x7f8eb5e16340
            dim[0] = 8  dim[1] = 11  {}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e5303b70:
            rank = 2, typekind = 6, {}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9c201920:
            rank = 2, typekind = 6, base_addr = 0x7fcc9c201c50
            {}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89102ef0:
            rank = 2, typekind = 6, base_addr = 0x7fef89102c50
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1,13) =  1.72723e-77
( 2,13) =  1.72723e-77
( 3,13) =  4.17201e-308
( 4,13) =  3.10935e-317
( 5,13) =  1.01565e+36
( 6,13) =  1.11769e+219
( 7,13) =  4.99006e-322
( 8,13) =  1.52974e-308
( 1,14) =  4.17201e-308
( 2,14) =  3.10935e-317
  skipping to end ...
( 7,22) =  4.17201e-308
( 8,22) =  3.10935e-317
( 1,23) =  1.11787e+253
( 2,23) =  3.98568e+252
base_addr = 0x7f86e5302cc0
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  -2.31584e+77
(10,13) =  -2.31584e+77
(11,13) =  2.07508e-322
(12,13) =  0
(13,13) =  -2.31584e+77
(14,13) =  -2.31584e+77
(15,13) =  9.4873e+170
( 9,14) =  9.83243e+24
dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---

  Real, *8, Dim 2, Data values:
( 9, 1) =  -1.72723e-77
(10, 1) =  -1.72723e-77
(11, 1) =  2.07508e-322
(12, 1) =  0
(13, 1) =  -1.72723e-77
(14, 1) =  -1.72723e-77
(15, 1) =  9.4873e+170
( 9, 2) =  9.83243e+24
(10, 2) =  7.90586e+25
(11, 2) =  1.814e-153
  skipping to end ...
(13,11) =  7.90586e+25
(14,11) =  1.814e-153
(15,11) =  1.1734e-153
( 9,12) =  4.23408e+180
(10,12) =  9.12542e+150
(11,12) =  4.73656e+180
(12,12) =  1.83308e+98
(13,12) =  7.59542e-96
(14,12) =  8.12823e-43
(15,12) =  7.23149e-308
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
( 3,23) =  6.97844e+252
( 4,23) =  2.36414e-308
( 5,23) =  4.17201e-308
( 6,23) =  3.10935e-317
( 7,23) =  1.11787e+253
( 8,23) =  3.98568e+252
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
(10,14) =  7.90586e+25
(11,14) =  1.814e-153
  skipping to end ...
(13,22) =  4.23408e+180
(14,22) =  9.12542e+150
(15,22) =  4.73656e+180
( 9,23) =  1.83308e+98
(10,23) =  7.59542e-96
(11,23) =  8.12823e-43
(12,23) =  2.78134e-309
(13,23) =  -2.31584e+77
(14,23) =  -1.29074e-231
(15,23) =  6.79039e-313
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 291
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
 Array name: MyArray with ArraySpec                                                          
  PASS  ArrayGet name, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 299
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 306
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  Getting Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 313
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  Verify Attribute count from an Array, ESMF_ArrayCreateGetUTest.F90, line 319
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayCreate from Copy, uninitialized Array Test, ESMF_ArrayCreateGetUTest.F90, line 326
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
 Base name    = Array007
  PASS  ArrayCreate from Copy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 333
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
 Base name    = Array007 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 340
--- ESMCI::Array::print start ---
 Base name    = Array007
 Base name    = Array007
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89103560:
            rank = 2, typekind = 6, base_addr = 0x7fef89103a30

 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8ea5d00400:
            rank = 2, typekind = 6, base_addr = 0x7f8ea5d00900
            dim[0] = 8  LocalArrayPrint: Array at address 0x7f86e5100500:
            rank = 2, typekind = 6, base_addr = 0x7f86e5100830
            dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  -2.31584e+77
(10,13) =  -2.31584e+77
(11,13) =  2.07508e-322
(12,13) =  0
(13,13) =  -2.31584e+77
(14,13) =  -2.31584e+77
(15,13) =  9.4873e+170
( 9,14) =  9.83243e+24
(10,14) =  7.90586e+25
(11,14) =  1.814e-153
  skipping to end ...
(13,22) =  4.23408e+180
(14,22) =  9.12542e+150
(15,22) =  4.73656e+180
( 9,23) =  1.83308e+98
(10,23) =  7.59542e-96
(11,23) =  8.12823e-43
(12,23) =  2.78134e-309
(13,23) =  -2.31584e+77
(14,23) =  -1.29074e-231
(15,23) =  6.79039e-313
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  -1.72723e-77
(10, 1) =  -1.72723e-77
(11, 1) =  2.07508e-322
(12, 1) =  0
(13, 1) =  -1.72723e-77
(14, 1) =  -1.72723e-77
(15, 1) =  9.4873e+170
( 9, 2) =  9.83243e+24
(10, 2) =  7.90586e+25
(11, 2) =  1.814e-153
  skipping to end ...
(13,11) =  7.90586e+25
(14,11) =  1.814e-153
(15,11) =  1.1734e-153
dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  1.72723e-77
( 2,13) =  1.72723e-77
( 3,13) =  4.17201e-308
( 4,13) =  3.10935e-317
( 5,13) =  1.01565e+36
( 6,13) =  1.11769e+219
( 7,13) =  4.99006e-322
( 8,13) =  1.52974e-308
( 1,14) =  4.17201e-308
( 2,14) =  3.10935e-317
  skipping to end ...
( 7,22) =  4.17201e-308
( 8,22) =  3.10935e-317
( 1,23) =  1.11787e+253
( 2,23) =  3.98568e+252
( 3,23) =  6.97844e+252
( 4,23) =  2.36414e-308
( 5,23) =  4.17201e-308
( 6,23) =  3.10935e-317
( 7,23) =  1.11787e+253
( 8,23) =  3.98568e+252
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [13 [13 [13, 23] 23] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9c202000:
            rank = 2, typekind = 6, base_addr = 0x7fcc9c2024e0
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  0
( 2, 1) =  0
( 3, 1) =  0
( 4, 1) =  0
( 5, 1) =  0
( 6, 1) =  0
( 7, 1) =  0
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  0
( 8,11) =  0
( 1,12) =  0
( 2,12) =  0
( 9,12) =  4.23408e+180
(10,12) =  9.12542e+150
(11,12) =  4.73656e+180
(12,12) =  1.83308e+98
(13,12) =  7.59542e-96
(14,12) =  8.12823e-43
(15,12) =  7.23149e-308
dim 1: [0]: [9 [9 [9, 15] 15] 15]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
( 3,12) =  0
( 4,12) =  0
( 5,12) =  0
( 6,12) =  0
( 7,12) =  0
( 8,12) =  0
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint from Copy after original destroy, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 347
  PASS  ArrayDestroy of Copy Test, ESMF_ArrayCreateGetUTest.F90, line 354
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9ae0cdc0:
            rank = 3, typekind = 5, base_addr = 0x7fcc9b81a000
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e5100500:
            rank = 3, typekind = 5, base_addr = 0x7f86e7001000
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  4.46573e+30
(-1, 1, 3) =  2.05902e-10
( 0, 1, 3) =  7.00716e+22
( 1, 1, 3) =  7.03737e+22
( 2, 1, 3) =  1.85287e+28
( 3, 1, 3) =  2.81467e+23
( 4, 1, 3) =  7.43337e+28
( 5, 1, 3) =  4.9203e+30
( 6, 1, 3) =  1.81768e+31
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
  PASS  ArrayCreate from Ptr with 3D farray on 2D DistGrid Test as Ptr, ESMF_ArrayCreateGetUTest.F90, line 363
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8ea5d00400:
            rank = 3, typekind = 5, base_addr = 0x7f8ea6803400
            dim[0] = 9  dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*4 / 3 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89103560:
            rank = 3, typekind = 5, base_addr = 0x7fef8a009200
            dim[0] = 9  ( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 0,12,10) =  0
( 1,12,10) =  0
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
dim[1] = 12  dim[2] = 8  
  Real, *4, Dim 3, Data values:
(-2, 1, 3) =  0
(-1, 1, 3) =  0
( 0, 1, 3) =  0
( 1, 1, 3) =  0
( 2, 1, 3) =  0
( 3, 1, 3) =  0
( 4, 1, 3) =  0
( 5, 1, 3) =  0
( 6, 1, 3) =  0
(-2, 2, 3) =  0
  skipping to end ...
( 6,11,10) =  0
(-2,12,10) =  0
(-1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-2 [-2, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 11] 11] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
( 0,12,10) =  0
( 1,12,10) =  0
( 2,12,10) =  0
( 3,12,10) =  0
( 4,12,10) =  0
( 5,12,10) =  0
( 6,12,10) =  0
dim 1: [0]: [-2 [-1 [-1, 5] 5] 6]
dim 2: [1]: [1 [1 [1, 12] 12] 12]
dim 3: undistLBound[0]=3            undistUBound[0]=10
--- ESMCI::Array::print end ---
  PASS  ArrayPrint for ArrayCreate from Ptr Test, ESMF_ArrayCreateGetUTest.F90, line 370
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  ArrayGet Test, ESMF_ArrayCreateGetUTest.F90, line 377
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  Deallocate returned pointer Test, ESMF_ArrayCreateGetUTest.F90, line 384
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 391
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
  PASS  ArrayCreate with 3D farray on 2D DistGrid Test, ESMF_ArrayCreateGetUTest.F90, line 400
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 407
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 418
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 425
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
  PASS  ArrayCreate with 3D farrayPtr on 2D DistGrid w/ ESMF_DATACOPY_VALUE Test, ESMF_ArrayCreateGetUTest.F90, line 436
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 443
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9c0063e0:
            rank = 2, typekind = 6, base_addr = 0x7fcc9c0060c0
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  1.72723e-77
( 2, 1) =  1.72723e-77
( 3, 1) =  8.8876e+252
( 4, 1) =  8.19845e+06
( 5, 1) =  1.50758e+161
( 6, 1) =  1.31837e+180
( 7, 1) =  1.05119e-153
( 8, 1) =  8.23578e-67
( 1, 2) =  1.72723e-77
( 2, 2) =  1.72723e-77
  skipping to end ...
( 7,11) =  2.56914e-322
( 8,11) =  0
( 1,12) =  2.122e-314
( 2,12) =  0
( 3,12) =  2.122e-314
( 4,12) =  2.12205e-314
( 5,12) =  4.27256e+180
( 6,12) =  3.47668e-310
( 7,12) =  3.45846e-323
( 8,12) =  6.71575e+193
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9c0060c0:
            rank = 2, typekind = 6, base_addr = 0x7fcc9c006840
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1, 1) =  1.72723e-77
( 2, 1) =  1.72723e-77
( 3, 1) =  3.84081e-312
( 4, 1) =  1.72723e-77
( 5, 1) =  1.72723e-77
( 6, 1) =  1.72723e-77
( 7, 1) =  5.43231e-312
( 8, 1) =  0
( 1, 2) =  0
( 2, 2) =  0
  skipping to end ...
( 7,11) =  7.90586e+25
( 8,11) =  1.814e-153
( 1,12) =  3.98743e+252
( 2,12) =  3.65588e+233
( 3,12) =  2.13946e+161
( 4,12) =  8.54925e+247
( 5,12) =  9.77637e+24
( 6,12) =  2.59339e+161
( 7,12) =  8.9119e+35
( 8,12) =  6.57947e-85
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8eb5e15fe0:
            rank = 2, typekind = 6, base_addr = 0x7f8eb5e17170
            dim[0] = 8  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 1,13) =  1.72723e-77
( 2,13) =  1.72723e-77
( 3,13) =  3.38929e-321
( 4,13) =  0
( 5,13) =  0
( 6,13) =  2.75859e-313
( 7,13) =  4.24399e-314
( 8,13) =  2.122e-314
( 1,14) =  2.122e-314
( 2,14) =  1.6976e-313
  skipping to end ...
( 7,22) =  8.12823e-43
( 8,22) =  1.72723e-77
( 1,23) =  1.72723e-77
( 2,23) =  1.72723e-77
( 3,23) =  6.26868e-310
( 4,23) =  4.17201e-309
( 5,23) =  4.17201e-308
( 6,23) =  3.10935e-317
( 7,23) =  1.11789e+253
( 8,23) =  3.67575e-308
dim 1: [0]: [1 [2 [1, 8] 6] 8]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8eb5e15fe0:
            rank = 2, typekind = 6, base_addr = 0x7f8eb5e17170
            dim[0] = 8  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 1,13) =  1.72723e-77
( 2,13) =  1.72723e-77
( 3,13) =  3.38929e-321
( 4,13) =  0
( 5,13) =  0
( 6,13) =  2.75859e-313
( 7,13) =  4.24399e-314
( 8,13) =  2.122e-314
( 1,14) =  2.122e-314
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
( 2,14) =  1.6976e-313
  skipping to end ...
( 7,23) =  1.11789e+253
( 8,23) =  3.67575e-308
( 1,24) =  1.72723e-77
( 2,24) =  1.72723e-77
( 3,24) =  3.17089e+64
( 4,24) =  1.21632e+45
( 5,24) =  4.87595e-80
( 6,24) =  2.87632e+161
( 7,24) =  6.61955e+265
( 8,24) =  1.30494e+180
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
dim 1: [0]: [1 [1 [1, 8] 8] 8]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
LocalArrayPrint: Array at address 0x7fcc9c0060c0:
            rank = 2, typekind = 6, base_addr = 0x7fcc9c802c00
            dim[0] = 12  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 0,-1) =  2.122e-314
( 1,-1) =  6.36599e-314
( 2,-1) =  1.061e-313
( 3,-1) =  1.4854e-313
( 4,-1) =  1.9098e-313
( 5,-1) =  2.3342e-313
( 6,-1) =  2.75859e-313
( 7,-1) =  3.18299e-313
( 8,-1) =  3.60739e-313
( 9,-1) =  4.03179e-313
  skipping to end ...
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
( 2,16) =  2.09865e-311
( 3,16) =  2.1029e-311
( 4,16) =  2.10714e-311
( 5,16) =  2.11139e-311
( 6,16) =  2.31934e-311
( 7,16) =  2.32359e-311
( 8,16) =  2.32783e-311
( 9,16) =  2.33207e-311
(10,16) =  2.33632e-311
(11,16) =  2.34056e-311
dim 1: [0]: [0 [1 [1, 8] 8] 11]
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 581
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8eb5e15fe0:
            rank = 2, typekind = 6, base_addr = 0x7f8eb6819a00
            dim[0] = 12  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 0,11) =  0
( 1,11) =  7.04438e-315
( 2,11) =  0
( 3,11) =  7.20275e-315
( 4,11) =  7.30433e-315
( 5,11) =  7.35813e-315
( 6,11) =  7.45971e-315
( 7,11) =  7.51351e-315
( 8,11) =  7.61509e-315
( 9,11) =  7.66889e-315
  skipping to end ...
( 2,27) =  0
( 3,27) =  0
( 4,27) =  0
( 5,27) =  0
( 6,27) =  0
( 7,27) =  0
( 8,27) =  0
( 9,27) =  0
(10,27) =  0
(11,27) =  0
dim 1: [0]: [0 [1 [1, 8] 8] 11]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 589
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89103a00:
            rank = 2, typekind = 6, base_addr = 0x7fef89104010
              PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
dim[0] = 7  dim[1] = 12  
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  Real, *8, Dim 2, Data values:
( 9, 1) =  -1.72723e-77
(10, 1) =  -1.72723e-77
(11, 1) =  4.89125e-322
(12, 1) =  0
(13, 1) =  0
(14, 1) =  2.122e-314
(15, 1) =  2.122e-314
( 9, 2) =  2.122e-314
(10, 2) =  2.122e-314
(11, 2) =  3.39519e-313
  skipping to end ...
(13,11) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
(11,12) =  0
(12,12) =  0
(13,12) =  0
(14,12) =  0
(15,12) =  0
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 9] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef890028f0:
            rank = 2, typekind = 6, base_addr = 0x7fef89002d90
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9, 1) =  0
(10, 1) =  0
(11, 1) =  0
(12, 1) =  0
(13, 1) =  0
(14, 1) =  0
(15, 1) =  0
( 9, 2) =  0
(10, 2) =  0
(11, 2) =  0
  skipping to end ...
(13,11) =  0
(14,11) =  0
(15,11) =  0
( 9,12) =  0
(10,12) =  0
(11,12) =  0
(12,12) =  0
(13,12) =  0
(14,12) =  0
(15,12) =  0
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [1 [2 [1, 12] 12] 12]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
  PASS  ArrayCreate with 3D farray on 2D DistGrid w/ distgridToArrayMap Test, ESMF_ArrayCreateGetUTest.F90, line 455
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 462
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef890028f0:
            rank = 2, typekind = 6,   PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ negative computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 472
base_addr = 0x7fef89802000
            dim[0] = 11  dim[1] = 18  
  Real, *8, Dim 2, Data values:
( 8,-1) =  0
( 9,-1) =  0
(10,-1) =  0
(11,-1) =  0
(12,-1) =  0
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
(13,-1) =  0
(14,-1) =  0
(15,-1) =  0
(16,-1) =  0
(17,-1) =  0
  skipping to end ...
( 9,16) =  0
(10,16) =  0
(11,16) =  0
(12,16) =  0
(13,16) =  0
(14,16) =  0
(15,16) =  0
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e5100500:
            rank = 2, typekind = 6, base_addr = 0x7f86e5100830
            (16,16) =  0
(17,16) =  0
(18,16) =  0
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [-1 [2 [1, 12] 12] 16]
--- ESMCI::Array::print end ---
dim[0] = 7  dim[1] = 11  
  Real, *8, Dim 2, Data values:
( 9,13) =  -2.31584e+77
(10,13) =  -2.31584e+77
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
(11,13) =  2.51973e-322
(12,13) =  0
(13,13) =  0
(14,13) =  2.75859e-313
(15,13) =  2.122e-314
( 9,14) =  2.122e-314
(10,14) =  2.122e-314
(11,14) =  3.39519e-313
  skipping to end ...
(13,22) =  0
(14,22) =  0
(15,22) =  0
( 9,23) =  0
(10,23) =  0
(11,23) =  0
(12,23) =  0
(13,23) =  0
(14,23) =  0
(15,23) =  0
dim 1: [0]: [9 [10 [9, 15] 13] 15]
dim 2: [1]: [13 [14 [13, 23] 20] 23]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computational widths Test, ESMF_ArrayCreateGetUTest.F90, line 479
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 585
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 486
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 495
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e3c3d900:
            rank = 2, typekind = 6, base_addr = 0x7f86e3c3dd00
            dim[0] = 7  dim[1] = 12  
  Real, *8, Dim 2, Data values:
( 9,13) =  0
(10,13) =  0
(11,13) =  0
(12,13) =  0
(13,13) =  0
(14,13) =  0
(15,13) =  0
( 9,14) =  0
(10,14) =  0
(11,14) =  0
  skipping to end ...
(13,23) =  0
(14,23) =  0
(15,23) =  0
( 9,24) =  0
(10,24) =  0
(11,24) =  0
(12,24) =  0
(13,24) =  0
(14,24) =  0
(15,24) =  0
dim 1: [0]: [9 [9 [9, 15] 13] 15]
dim 2: [1]: [13 [13 [13, 23] 24] 24]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 502
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 515
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 525
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 534
  PASS  ArrayCreate Allocate 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 544
--- ESMCI::Array::print start ---
 Base name    = MyArray Negative Edge
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 2 
~ lower class' values ~
DistGrid dimCount = 2
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e3c3d900:
            rank = 2, typekind = 6, base_addr = 0x7f86e4041c00
            dim[0] = 11  dim[1] = 17  
  Real, *8, Dim 2, Data values:
( 8,11) =  0
( 9,11) =  9.09081e-322
(10,11) =  0
(11,11) =  9.09081e-322
(12,11) =  6.92766e-310
(13,11) =  2.24774e-314
(14,11) =  2.75196e-314
(15,11) =  0
(16,11) =  2.05834e-310
(17,11) =  2.98613e-319
  skipping to end ...
( 9,27) =  0
(10,27) =  6.92766e-310
(11,27) =  4.94066e-324
(12,27) =  6.92766e-310
(13,27) =  2.24774e-314
(14,27) =  2.75196e-314
(15,27) =  0
(16,27) =  2.05834e-310
(17,27) =  2.98613e-319
(18,27) =  4.24399e-314
dim 1: [0]: [8 [9 [9, 15] 13] 18]
dim 2: [1]: [11 [13 [13, 23] 24] 27]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 551
  PASS  ArrayGet 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 563
  PASS  Check total widths for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 571
  PASS  Check total bounds for 2D ESMF_TYPEKIND_R8 w/ computationalEdge and total widths Test, ESMF_ArrayCreateGetUTest.F90, line 593
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 602
  PASS  Create test Array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 611
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_PET Test, ESMF_ArrayCreateGetUTest.F90, line 618
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_PET, ESMF_ArrayCreateGetUTest.F90, line 632
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  Create test Array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 642
  PASS  ArrayGet Fortran array pointer for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 654
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet ssiLocalDeCount ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 672
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArrayGet localDeToDeMap ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 691
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  ArraySync() for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 713
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  LocalArrayGet Fortran array pointer for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 726
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  Test data in LocalArray for last ssiLocalDe for ESMF_PIN_DE_TO_SSI Test, ESMF_ArrayCreateGetUTest.F90, line 756
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayDestroy Test for array with ESMF_PIN_DE_TO_SSI, ESMF_ArrayCreateGetUTest.F90, line 767
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 789
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
--- ESMCI::Array::print start ---
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
--- ESMCI::Array::print start ---
 Base name    = Array020
 Status: Base =  Base name    = Array020
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
  PASS  ArrayGet Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 796
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89003a20:
            rank = 1, typekind = 6, base_addr = 0x7ffee06231f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e3f018a0:
            rank = 1, typekind = 6, base_addr = 0x7ffee46031f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
--- ESMCI::Array::print start ---
 Base name    = Array020
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
  PASS  ArrayGet w/ incompatible Fortran array pointer, 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 803
--- ESMCI::Array::print start ---
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9ac364d0:
            rank = 1, typekind = 6, base_addr = 0x7ffee71eb1f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
 Base name    = Array020
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~

  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
LocalArrayPrint: Array at address 0x7f8eb5f044e0:
            rank = 1, typekind = 6, base_addr = 0x7ffeec8011f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
--- ESMCI::Array::print start ---
 Base name    = Array021
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 810
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 1 ~
LocalArrayPrint: Array at address 0x7fef89003a20:
            rank = 1, typekind = 6, base_addr = 0x7ffee06231f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 817
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
--- ESMCI::Array::print start ---
 Base name    = Array021
--- ESMCI::Array::print start ---
 Base name    = Array021
 Status: Base = Ready,  object =  Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  ArrayCreate AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 826
Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9ac364d0:
            rank = 1, typekind = 6, base_addr = 0x7ffee71eb1f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
dim 1: [0]: [1 [2 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
--- ESMCI::Array::print start ---
 Base name    = Array021
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 4
localDeCount = 1
~ local data in LocalArray for DE 2 ~
LocalArrayPrint: Array at address 0x7f8eb5f044e0:
            rank = 1, typekind = 6, base_addr = 0x7ffeec8011f0
            dim[0] = 10  
localDeCount = 1
~ local data in LocalArray for DE 3 ~
LocalArrayPrint: Array at address 0x7f86e3e031f0:
            rank = 1, typekind = 6, base_addr = 0x7ffee46031f0
            dim[0] = 10  
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
( 9) =  0
(10) =  0
dim 1: [0]: [1 [1 [1, 10] 9] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  Real, *8, Dim 1, Data values:
( 1) =  0
( 2) =  0
( 3) =  0
( 4) =  0
( 5) =  0
( 6) =  0
( 7) =  0
( 8) =  0
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
( 9) =  0
(10) =  0
dim 1: [0]: [1 [1 [1, 10] 10] 10]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint AssmdShape 1D ESMF_TYPEKIND_R8 w/ negative computationalEdge widths Test, ESMF_ArrayCreateGetUTest.F90, line 833
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 840
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayCreate AssmdShape 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 859
  PASS  ArrayGet Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 866
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  ArrayGet w/ incompatible Fortran array pointer, 2D ESMF_TYPEKIND_R8 Test, ESMF_ArrayCreateGetUTest.F90, line 873
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 880
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayCreate AssmdShape 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 899
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayGet Fortran array pointer, 3D ESMF_TYPEKIND_R4 Test, ESMF_ArrayCreateGetUTest.F90, line 906
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 913
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  ArrayCreate AssmdShape 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 932
  PASS  ArrayGet Fortran array pointer, 4D ESMF_TYPEKIND_I4 Test, ESMF_ArrayCreateGetUTest.F90, line 939
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 946
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base =   PASS  Create test Array for extra edge element test, ESMF_ArrayCreateGetUTest.F90, line 1007
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1036
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base = Ready,  object =   PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
Ready
 Proxy        = no
 Root Info (Attributes):
{}  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 0
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  Create Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1055
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
--- ESMCI::Array::print start ---
 Base name    = MyArray
 Status: Base =   Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
Ready,  object = Ready
 Proxy        = no
 Root Info (Attributes):
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
{}Array typekind/rank: Real*8 / 1 
~ lower class' values ~
DistGrid dimCount = 1
deCount = 1
localDeCount = 1
~ local data in LocalArray for DE 0 ~
LocalArrayPrint: Array at address 0x7fcc9ac38520:
            rank = 1, typekind = 6, base_addr = 0x7fcc9ac37f40
            dim[0] = 4  
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  Real, *8, Dim 1, Data values:
( 1) =  1.72723e-77
( 2) =  1.72723e-77
( 3) =  6.94245e-310
( 4) =  1.72723e-77
dim 1: [0]: [1 [1 [1, 4] 4] 4]
--- ESMCI::Array::print end ---
  PASS  ArrayPrint Array on single DE DistGrid, ESMF_ArrayCreateGetUTest.F90, line 1062
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1069
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  Create Array on single DE DistGrid with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1085
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1092
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  PASS  Create Array on 4 DE DistGrid with only DE 0 elements, with Fortran allocation, ESMF_ArrayCreateGetUTest.F90, line 1120
  PASS  ArrayDestroy Test, ESMF_ArrayCreateGetUTest.F90, line 1127
  Ending Test, file ESMF_ArrayCreateGetUTest.F90, line 1137
  PET           1  Test Elapsed Time    13.881000000000004       msec.
  PET           2  Test Elapsed Time    13.797000000000004       msec.
  PET           3  Test Elapsed Time    13.738999999999994       msec.
  PET           0  Test Elapsed Time    14.046000000000003       msec.
Wed Dec  9 23:33:49 MST 2020
